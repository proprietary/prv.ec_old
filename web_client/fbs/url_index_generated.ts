// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';
/**
 *
 * This when serialized to bytes is used as the key for lookup in the RocksDB store.
 *
 *
 * @constructor
 */
export namespace ec_prv.fbs{
export class URLIndex {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns URLIndex
 */
__init(i:number, bb:flatbuffers.ByteBuffer):URLIndex {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param URLIndex= obj
 * @returns URLIndex
 */
static getRootAsURLIndex(bb:flatbuffers.ByteBuffer, obj?:URLIndex):URLIndex {
  return (obj || new URLIndex()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param URLIndex= obj
 * @returns URLIndex
 */
static getSizePrefixedRootAsURLIndex(bb:flatbuffers.ByteBuffer, obj?:URLIndex):URLIndex {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new URLIndex()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
version():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 1;
};

/**
 * @returns number
 */
id():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startURLIndex(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number version
 */
static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt8(0, version, 1);
};

/**
 * @param flatbuffers.Builder builder
 * @param number id
 */
static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(1, id, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endURLIndex(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishURLIndexBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishSizePrefixedURLIndexBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
};

static createURLIndex(builder:flatbuffers.Builder, version:number, id:number):flatbuffers.Offset {
  URLIndex.startURLIndex(builder);
  URLIndex.addVersion(builder, version);
  URLIndex.addId(builder, id);
  return URLIndex.endURLIndex(builder);
}

/**
 * @returns URLIndexT
 */
unpack(): URLIndexT {
  return new URLIndexT(
    this.version(),
    this.id()
  );
};

/**
 * @param URLIndexT _o
 */
unpackTo(_o: URLIndexT): void {
  _o.version = this.version();
  _o.id = this.id();
};
}

export class URLIndexT {
/**
 * @constructor
 * @param number version
 * @param number id
 */
constructor(
  public version: number = 1,
  public id: number = 0
){};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ec_prv.fbs.URLIndex.createURLIndex(builder,
    this.version,
    this.id
  );
};
}
}
