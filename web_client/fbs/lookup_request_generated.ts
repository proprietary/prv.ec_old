// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @constructor
 */
export namespace ec_prv.fbs{
export class LookupRequest {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns LookupRequest
 */
__init(i:number, bb:flatbuffers.ByteBuffer):LookupRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param LookupRequest= obj
 * @returns LookupRequest
 */
static getRootAsLookupRequest(bb:flatbuffers.ByteBuffer, obj?:LookupRequest):LookupRequest {
  return (obj || new LookupRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param LookupRequest= obj
 * @returns LookupRequest
 */
static getSizePrefixedRootAsLookupRequest(bb:flatbuffers.ByteBuffer, obj?:LookupRequest):LookupRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LookupRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
version():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 1;
};

/**
 * @returns number
 */
lookupKey():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startLookupRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number version
 */
static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt8(0, version, 1);
};

/**
 * @param flatbuffers.Builder builder
 * @param number lookupKey
 */
static addLookupKey(builder:flatbuffers.Builder, lookupKey:number) {
  builder.addFieldInt32(1, lookupKey, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endLookupRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishLookupRequestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishSizePrefixedLookupRequestBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
};

static createLookupRequest(builder:flatbuffers.Builder, version:number, lookupKey:number):flatbuffers.Offset {
  LookupRequest.startLookupRequest(builder);
  LookupRequest.addVersion(builder, version);
  LookupRequest.addLookupKey(builder, lookupKey);
  return LookupRequest.endLookupRequest(builder);
}

/**
 * @returns LookupRequestT
 */
unpack(): LookupRequestT {
  return new LookupRequestT(
    this.version(),
    this.lookupKey()
  );
};

/**
 * @param LookupRequestT _o
 */
unpackTo(_o: LookupRequestT): void {
  _o.version = this.version();
  _o.lookupKey = this.lookupKey();
};
}

export class LookupRequestT {
/**
 * @constructor
 * @param number version
 * @param number lookupKey
 */
constructor(
  public version: number = 1,
  public lookupKey: number = 0
){};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ec_prv.fbs.LookupRequest.createLookupRequest(builder,
    this.version,
    this.lookupKey
  );
};
}
}
