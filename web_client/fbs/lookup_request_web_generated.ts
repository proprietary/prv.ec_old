// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @constructor
 */
export namespace ec_prv.fbs{
export class LookupRequestWeb {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns LookupRequestWeb
 */
__init(i:number, bb:flatbuffers.ByteBuffer):LookupRequestWeb {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param LookupRequestWeb= obj
 * @returns LookupRequestWeb
 */
static getRootAsLookupRequestWeb(bb:flatbuffers.ByteBuffer, obj?:LookupRequestWeb):LookupRequestWeb {
  return (obj || new LookupRequestWeb()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param LookupRequestWeb= obj
 * @returns LookupRequestWeb
 */
static getSizePrefixedRootAsLookupRequestWeb(bb:flatbuffers.ByteBuffer, obj?:LookupRequestWeb):LookupRequestWeb {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LookupRequestWeb()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
lookupKey():string|null
lookupKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
lookupKey(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startLookupRequestWeb(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset lookupKeyOffset
 */
static addLookupKey(builder:flatbuffers.Builder, lookupKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, lookupKeyOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endLookupRequestWeb(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishLookupRequestWebBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishSizePrefixedLookupRequestWebBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
};

static createLookupRequestWeb(builder:flatbuffers.Builder, lookupKeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  LookupRequestWeb.startLookupRequestWeb(builder);
  LookupRequestWeb.addLookupKey(builder, lookupKeyOffset);
  return LookupRequestWeb.endLookupRequestWeb(builder);
}

/**
 * @returns LookupRequestWebT
 */
unpack(): LookupRequestWebT {
  return new LookupRequestWebT(
    this.lookupKey()
  );
};

/**
 * @param LookupRequestWebT _o
 */
unpackTo(_o: LookupRequestWebT): void {
  _o.lookupKey = this.lookupKey();
};
}

export class LookupRequestWebT {
/**
 * @constructor
 * @param string|Uint8Array|null lookupKey
 */
constructor(
  public lookupKey: string|Uint8Array|null = null
){};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const lookupKey = (this.lookupKey !== null ? builder.createString(this.lookupKey!) : 0);

  return ec_prv.fbs.LookupRequestWeb.createLookupRequestWeb(builder,
    lookupKey
  );
};
}
}
